<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Meta tags for character set and responsive design -->
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Data</title>

  <!-- Internal CSS styling for the page -->
  <style>
    /* General styling for the body */
    body {
      font-family: 'Arial', sans-serif;
      background-color: #f8f8f8;
      margin: 0;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
      flex-direction: column; /* Center items vertically */
    }

    /* Styling for the main heading */
    h1 {
      text-align: center;
      margin-bottom: 20px;
      margin-top: 10%;
    }

    /* Styling for the user data container */
    #userDataContainer {
      position: relative;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    /* Styling for the user data */
    #userData {
      display: inline-block;
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
      text-align: left;
      width: 400px;
      margin-top: 20px; /* Adjust the top margin as needed */
    }

    /* Styling for the user image */
    #userData img {
      max-width: 150px;
      border-radius: 50%;
      margin-left: 20px;
      float: right;
    }

    /* Styling for paragraphs */
    p {
      margin-top: 10px;
      margin-bottom: 10px;
    }

    /* Styling for buttons */
    button {
      background-color: #4caf50;
      color: #fff;
      padding: 10px 15px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      margin-right: 10px;
    }

    /* Styling for button hover state */
    button:hover {
      background-color: #45a049;
    }
  </style>
</head>
<body>

  <!-- Main heading for the page -->
  <h1>User Data</h1>

  <!-- Container for displaying user data -->
  <div id="userDataContainer">
    <div id="userData"></div>
  </div>

  <!-- JavaScript script for fetching and rendering user data -->
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Get the 'userData' div element
      const userDataDiv = document.getElementById('userData');

      // Function to fetch user data from the server
      function fetchUserData() {
        fetch('http://localhost:3000/api/user/')
          .then(response => response.json())
          .then(users => {
            // Handle the fetched user data
            if (users && users.length > 0) {
              if (users.length === 1) {
                const user = users[0];
                const userDiv = renderUserData(user);
                userDiv.appendChild(createButtons(user._id));
                userDataDiv.appendChild(userDiv);
              } else {
                users.forEach(user => {
                  const userDiv = renderUserData(user);
                  userDiv.appendChild(createButtons(user._id));
                  userDataDiv.appendChild(userDiv);
                });
              }
            } else {
              // Display a message when no users are found
              userDataDiv.innerHTML = '<p>No users found.</p>';
            }
          })
          .catch(error => {
            // Handle errors when fetching user data
            console.error('Error fetching user data:', error);
            userDataDiv.innerHTML = '<p>Error fetching user data.</p>';
          });
      }

      // Call the fetchUserData function when the page loads
      fetchUserData();

      // Function to create buttons for modifying and deleting a user
      function createButtons(userId) {
        const buttonsDiv = document.createElement('div');

        // Modify button
        const modifyButton = document.createElement('button');
        modifyButton.textContent = 'Modify';
        modifyButton.addEventListener('click', () => {
          localStorage.setItem('userId', userId);
          window.location.href = 'http://localhost:3000/modify';
        });

        // Delete button
        const deleteButton = document.createElement('button');
        deleteButton.textContent = 'Delete';
        deleteButton.addEventListener('click', () => {
          if (confirm('Are you sure you want to delete this user?')) {
            fetch(`http://localhost:3000/api/user/delete/${userId}`, { method: 'DELETE' })
              .then(response => response.json())
              .then(data => {
                console.log('User deleted:', data);
                fetchUserData();
              })
              .catch(error => {
                console.error('Error deleting user:', error);
              });
          }
        });

        // Append buttons to the 'buttonsDiv'
        buttonsDiv.appendChild(modifyButton);
        buttonsDiv.appendChild(deleteButton);

        return buttonsDiv;
      }

      // Function to render user data in the HTML
      function renderUserData(user) {
        const userDiv = document.createElement('div');

        // Paragraph for displaying user name
        const nameParagraph = document.createElement('p');
        nameParagraph.innerHTML = `<strong>Name:</strong> ${user.name}`;

        // Paragraph for displaying user email
        const emailParagraph = document.createElement('p');
        emailParagraph.innerHTML = `<strong>Email:</strong> ${user.email}`;

        // Paragraph for displaying user phone
        const phoneParagraph = document.createElement('p');
        phoneParagraph.innerHTML = `<strong>Phone:</strong> ${user.phone}`;

        // Paragraph for displaying user role
        const roleParagraph = document.createElement('p');
        roleParagraph.innerHTML = `<strong>Role:</strong> ${user.role}`;

        // Horizontal line separator
        const hrElement = document.createElement('hr');

        // Paragraph for displaying user profile image
        const profileImageParagraph = document.createElement('p');
        profileImageParagraph.innerHTML = `<strong></strong>`;

        // Image element for user profile image
        const profileImageElement = document.createElement('img');
        profileImageElement.src = `uploads/${user.profileImage}`;
        profileImageElement.alt = 'Profile Image';

        // Append profile image to the 'profileImageParagraph'
        profileImageParagraph.appendChild(profileImageElement);

        // Append all paragraphs and elements to the 'userDiv'
        userDiv.appendChild(profileImageParagraph);
        userDiv.appendChild(nameParagraph);
        userDiv.appendChild(emailParagraph);
        userDiv.appendChild(phoneParagraph);
        userDiv.appendChild(roleParagraph);
        userDiv.appendChild(hrElement);

        return userDiv;
      }
    });
  </script>

</body>
</html>
